@page "/recursos/votos"
@inject HttpClient http
@inject NavigationManager navigation

<h3>Votação dos Recusos</h3>
<hr />
<div class="row g-3">
    <div class="col-12">
        <label for="idConteudo" class="form-label">Pesquisa Recurso</label>
        <input type="text"
               class="form-control"
               id="idConteudo"
               placeholder="Informe o conteúdo."
               @bind="@PesquisarTermo" @bind:event="oninput">
    </div>
</div>
<hr />

@if (Recursos == null)
{
    <p><em>Carregando...</em></p>
}
else if (Recursos.Length == 0)
{
    <p><em>Não existem recursos cadastradas.</em></p>
}
else
{
    <div class="table-responsive-sm">
        <table class="table table-hover">
            <thead>
                <tr>
                    <td width="5%" scope="col">Votar</td>
                    <td width="95%" scope="col">Tarefa</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Recursos)
                {
                    <tr>
                        <td width="5%" scope="row">
                            <div class="btn-group mb-3">
                                <button type="button" @onclick="@(() => Votar(item.Id))" class="btn btn-outline-primary" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Alterar">
                                    <span class="oi oi-thumb-up" aria-hidden="true"></span>
                                </button>
                            </div>
                        </td>
                        <td width="95%">@item.Tarefa</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    public Recurso[] Recursos { get; set; }
    public Recurso[] RecursosBase { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    public string pesquisarTermo { get; set; }
    public string PesquisarTermo
    {
        get { return pesquisarTermo; }
        set
        {
            pesquisarTermo = value;
            PesquisarConteudo();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Carregar();
    }

    private async Task Carregar()
    {
        Recursos = await http.GetFromJsonAsync<Recurso[]>(await Helppers.getUrlAPI_Recursos(http));
        RecursosBase = Recursos;
    }

    protected void PesquisarConteudo()
    {

        if (string.IsNullOrEmpty(pesquisarTermo))
        {
            Recursos = RecursosBase;
        }
        else
        {
            Recursos = Recursos.Where(x => x.Tarefa.ToUpper().Contains(pesquisarTermo.ToUpper())).ToArray<Recurso>();
        }

    }

    protected async Task Votar(Guid idRecurso)
    {
        if (await Helppers.ExibirVotacao(Modal, http, idRecurso) == SimNao.Sim)
            await Helppers.ExibirMensagem(Modal, "Voto computado com sucesso.");
    }
}
