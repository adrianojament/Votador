// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.data.Context;

namespace api.data.Migrations
{
    [DbContext(typeof(VotosContext))]
    partial class VotosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("api.domain.Entities.RecursoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Tarefa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tarefa");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_recursos");

                    b.ToTable("recursos");
                });

            modelBuilder.Entity("api.domain.Entities.UsuarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("senha");

                    b.Property<string>("eMail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("e_mail");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_usuarios");

                    b.HasIndex("eMail")
                        .IsUnique()
                        .HasDatabaseName("ix_usuarios_e_mail");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("api.domain.Entities.VotoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<DateTime?>("CriadoEm")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("criado_em");

                    b.Property<Guid>("RecursoId")
                        .HasColumnType("uuid")
                        .HasColumnName("recurso_id");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_votos");

                    b.HasIndex("RecursoId")
                        .HasDatabaseName("ix_votos_recurso_id");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_votos_usuario_id");

                    b.ToTable("votos");
                });

            modelBuilder.Entity("api.domain.Entities.VotoEntity", b =>
                {
                    b.HasOne("api.domain.Entities.RecursoEntity", "Recurso")
                        .WithMany("Votos")
                        .HasForeignKey("RecursoId")
                        .HasConstraintName("fk_votos_recursos_recurso_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.domain.Entities.UsuarioEntity", "Usuario")
                        .WithMany("Votos")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_votos_usuarios_usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recurso");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("api.domain.Entities.RecursoEntity", b =>
                {
                    b.Navigation("Votos");
                });

            modelBuilder.Entity("api.domain.Entities.UsuarioEntity", b =>
                {
                    b.Navigation("Votos");
                });
#pragma warning restore 612, 618
        }
    }
}
